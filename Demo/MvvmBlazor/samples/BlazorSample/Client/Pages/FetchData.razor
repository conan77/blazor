@page "/fetchdata"

@inherits MvvmComponentBase<FetchDataViewModel>

<h1>Weather forecast</h1>
 
<div class="alert alert-primary" role="alert">
    To use a view model with your component simply inherit from the base class
    <pre style="display: inline">MvvmComponentBase</pre> and specify your view model type for this component as a generic argument.
    Your view model will have access to all lifecycle methods you also have on your component.
    As soon as any value changes via the <pre style="display: inline">Set</pre> method on your view model the component will refresh if needed.
</div>

<p>This component demonstrates fetching data from a service.</p>

@if (Bind(x => x.Forecasts) == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in Bind(x => x.Forecasts))
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}